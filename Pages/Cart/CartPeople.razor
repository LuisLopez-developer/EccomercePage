@layout AuthLayout
@page "/cart/userdetails"

@using EccomercePage.Api.Interfaces
@using EccomercePage.Api.Repository
@using EccomercePage.Api.Repository.States
@using EccomercePage.Api.Services.Profile
@using EccomercePage.Components.Order
@using EccomercePage.Data.DTO.Profile
@using EccomercePage.Data.Validations
@using EccomercePage.Routes.Redirects
@using FluentValidation
@using FluentValidation.Results
@using Microsoft.AspNetCore.Components.Authorization

@inject CartState CartState
@inject ICartRepository _cartRepository
@inject IPeopleService _peopleServices
@inject IValidator<AddPeopleDTO> AddPeopleValidator
@inject NavigationManager Navigation
@inject IUserRepository _userRepository

<AuthorizeView>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        <section style="display: flex; max-width: 1200px; margin: auto; background-color: #f0f4f8; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            <div style="flex: 2; background-color: #ffe5e5; padding: 20px; border-radius: 8px; margin-right: 20px;">
                <h2 style="margin-bottom: 20px; color: #333;">Información del Cliente</h2>
                <EditForm Model="@addPeopleDTO" OnValidSubmit="AddPeople" Context="editFormContext">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div style="margin-bottom: 15px;">
                        <label for="name" style="font-weight: bold;">Nombre</label>
                        <InputText id="name" @bind-Value="addPeopleDTO.Name" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px;" />
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label for="lastName" style="font-weight: bold;">Apellidos</label>
                        <InputText id="lastName" @bind-Value="addPeopleDTO.LastName" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px;" />
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label for="dni" style="font-weight: bold;">DNI</label>
                        <InputText id="dni" @bind-Value="addPeopleDTO.DNI" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px;" />
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label for="direccion" style="font-weight: bold;">Dirección</label>
                        <InputText id="direccion" @bind-Value="addPeopleDTO.Address" style="width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px;" />
                    </div>
                    <button type="submit" style="padding: 10px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">Guardar</button>
                </EditForm>

                @if (validationErrors != null && validationErrors.Count > 0)
                {
                    <ul style="color: red; list-style-type: none; padding: 0;">
                        @foreach (var error in validationErrors)
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                }
            </div>
            <div style="flex: 1; background-color: #e6f7ff; padding: 20px; border-radius: 8px;">
                <h3 style="margin-bottom: 15px; color: #333;">Resumen de Compra</h3>
                <PurchaseSummary Total="@total" TotalProducts="@CartState.CartItems" />
            </div>
        </section>
    </Authorized>
</AuthorizeView>

@code {
    private decimal total;

    protected override async Task OnInitializedAsync()
    {
        ValidateUserHasBillingInformation();

        CartState.OnChange += StateHasChanged;
        await _cartRepository.UpdateCartStateAsync();
        total = await _cartRepository.GetTotalAmountAsync();
    }

    private async void ValidateUserHasBillingInformation()
    {
        if (await _userRepository.IsUserLinkedToPerson())
        {
            Navigation.NavigateTo("/cart/payment");
        }
    }

    public void Dispose()
    {
        CartState.OnChange -= StateHasChanged;
    }

    private AddPeopleDTO addPeopleDTO = new AddPeopleDTO();
    private List<ValidationFailure> validationErrors = [];

    private async Task AddPeople()
    {
        var validationResult = await AddPeopleValidator.ValidateAsync(addPeopleDTO);
        if (validationResult.IsValid)
        {
            var response = await _peopleServices.AddPeople(addPeopleDTO);
            if (response != null)
            {
                Navigation.NavigateTo("/cart/payment");
            }
            else
            {
                // Manejar errores de registro
                foreach (var error in response?.Errors ?? [])
                {
                    // Mostrar errores en la interfaz de usuario
                    validationErrors.Add(new ValidationFailure("", error));
                }
            }
        }
        else
        {
            validationErrors = validationResult.Errors.ToList();
        }
    }
}
